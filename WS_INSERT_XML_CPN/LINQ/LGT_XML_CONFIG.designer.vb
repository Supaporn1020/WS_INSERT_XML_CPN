'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="FDA_XML_CONFIG")>  _
Partial Public Class LGT_XML_CONFIGDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertXML_CONFIG(instance As XML_CONFIG)
    End Sub
  Partial Private Sub UpdateXML_CONFIG(instance As XML_CONFIG)
    End Sub
  Partial Private Sub DeleteXML_CONFIG(instance As XML_CONFIG)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("FDA_XML_CONFIGConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property XML_CONFIGs() As System.Data.Linq.Table(Of XML_CONFIG)
		Get
			Return Me.GetTable(Of XML_CONFIG)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.XML_CONFIG")>  _
Partial Public Class XML_CONFIG
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDA As Integer
	
	Private _XML_SQL As String
	
	Private _XML_TYPE As String
	
	Private _XML_PATH As String
	
	Private _XML_DESCRIPTION As String
	
	Private _XML_HEADER As String
	
	Private _XML_BODY As String
	
	Private _XML_FIELDS_NAME As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDAChanged()
    End Sub
    Partial Private Sub OnXML_SQLChanging(value As String)
    End Sub
    Partial Private Sub OnXML_SQLChanged()
    End Sub
    Partial Private Sub OnXML_TYPEChanging(value As String)
    End Sub
    Partial Private Sub OnXML_TYPEChanged()
    End Sub
    Partial Private Sub OnXML_PATHChanging(value As String)
    End Sub
    Partial Private Sub OnXML_PATHChanged()
    End Sub
    Partial Private Sub OnXML_DESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnXML_DESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnXML_HEADERChanging(value As String)
    End Sub
    Partial Private Sub OnXML_HEADERChanged()
    End Sub
    Partial Private Sub OnXML_BODYChanging(value As String)
    End Sub
    Partial Private Sub OnXML_BODYChanged()
    End Sub
    Partial Private Sub OnXML_FIELDS_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnXML_FIELDS_NAMEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDA() As Integer
		Get
			Return Me._IDA
		End Get
		Set
			If ((Me._IDA = value)  _
						= false) Then
				Me.OnIDAChanging(value)
				Me.SendPropertyChanging
				Me._IDA = value
				Me.SendPropertyChanged("IDA")
				Me.OnIDAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XML_SQL", DbType:="NVarChar(MAX)")>  _
	Public Property XML_SQL() As String
		Get
			Return Me._XML_SQL
		End Get
		Set
			If (String.Equals(Me._XML_SQL, value) = false) Then
				Me.OnXML_SQLChanging(value)
				Me.SendPropertyChanging
				Me._XML_SQL = value
				Me.SendPropertyChanged("XML_SQL")
				Me.OnXML_SQLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XML_TYPE", DbType:="NVarChar(50)")>  _
	Public Property XML_TYPE() As String
		Get
			Return Me._XML_TYPE
		End Get
		Set
			If (String.Equals(Me._XML_TYPE, value) = false) Then
				Me.OnXML_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._XML_TYPE = value
				Me.SendPropertyChanged("XML_TYPE")
				Me.OnXML_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XML_PATH", DbType:="NVarChar(MAX)")>  _
	Public Property XML_PATH() As String
		Get
			Return Me._XML_PATH
		End Get
		Set
			If (String.Equals(Me._XML_PATH, value) = false) Then
				Me.OnXML_PATHChanging(value)
				Me.SendPropertyChanging
				Me._XML_PATH = value
				Me.SendPropertyChanged("XML_PATH")
				Me.OnXML_PATHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XML_DESCRIPTION", DbType:="NVarChar(MAX)")>  _
	Public Property XML_DESCRIPTION() As String
		Get
			Return Me._XML_DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._XML_DESCRIPTION, value) = false) Then
				Me.OnXML_DESCRIPTIONChanging(value)
				Me.SendPropertyChanging
				Me._XML_DESCRIPTION = value
				Me.SendPropertyChanged("XML_DESCRIPTION")
				Me.OnXML_DESCRIPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XML_HEADER", DbType:="NVarChar(MAX)")>  _
	Public Property XML_HEADER() As String
		Get
			Return Me._XML_HEADER
		End Get
		Set
			If (String.Equals(Me._XML_HEADER, value) = false) Then
				Me.OnXML_HEADERChanging(value)
				Me.SendPropertyChanging
				Me._XML_HEADER = value
				Me.SendPropertyChanged("XML_HEADER")
				Me.OnXML_HEADERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XML_BODY", DbType:="NVarChar(MAX)")>  _
	Public Property XML_BODY() As String
		Get
			Return Me._XML_BODY
		End Get
		Set
			If (String.Equals(Me._XML_BODY, value) = false) Then
				Me.OnXML_BODYChanging(value)
				Me.SendPropertyChanging
				Me._XML_BODY = value
				Me.SendPropertyChanged("XML_BODY")
				Me.OnXML_BODYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XML_FIELDS_NAME", DbType:="NVarChar(MAX)")>  _
	Public Property XML_FIELDS_NAME() As String
		Get
			Return Me._XML_FIELDS_NAME
		End Get
		Set
			If (String.Equals(Me._XML_FIELDS_NAME, value) = false) Then
				Me.OnXML_FIELDS_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._XML_FIELDS_NAME = value
				Me.SendPropertyChanged("XML_FIELDS_NAME")
				Me.OnXML_FIELDS_NAMEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
